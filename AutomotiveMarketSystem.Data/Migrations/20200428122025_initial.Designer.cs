// <auto-generated />
using System;
using AutomotiveMarketSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace AutomotiveMarketSystem.Data.Migrations
{
    [DbContext(typeof(AutomotiveMarketSystemContext))]
    [Migration("20200428122025_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarId")
                        .HasColumnName("CARID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ADVERTISEMENTS");
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdvertisementId");

                    b.Property<int>("CarBrandId")
                        .HasColumnName("CARBRANDID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("Door")
                        .HasColumnName("DOOR")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("Engine")
                        .HasColumnName("ENGINE")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("EngineTypeStatusId");

                    b.Property<decimal>("Price")
                        .HasColumnName("PRICE")
                        .HasColumnType("NUMBER");

                    b.Property<DateTime>("ProductionYear")
                        .HasColumnName("PRODUCTIONYEAR")
                        .HasColumnType("DATE");

                    b.HasKey("Id");

                    b.HasIndex("CarBrandId");

                    b.HasIndex("EngineTypeStatusId")
                        .IsUnique();

                    b.ToTable("CAR");
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.CarBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandName")
                        .HasColumnName("BRANDNAME")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("CARBRAND");
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CarBrandId")
                        .HasColumnName("CARBRANDID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ModelName")
                        .HasColumnName("MODELNAME")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("CarBrandId");

                    b.ToTable("CARMODEL");
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.EngineTypeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EngineType")
                        .HasColumnName("ENGINETYPE")
                        .HasColumnType("VARCHAR2(50)");

                    b.HasKey("Id");

                    b.ToTable("ENGINETYPESTATUS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EngineType = "Gas"
                        },
                        new
                        {
                            Id = 2,
                            EngineType = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            EngineType = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            EngineType = "Hybrid"
                        });
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c23c3678-6194-4b7e-a928-09614190eb62",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "816a7a6b-f0e4-4e9c-9549-01dd8ed7aeb2",
                            Email = "admin1@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN1@ADMIN.COM",
                            NormalizedUserName = "DIYAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEF+0V5DvKbXLUoyRTJod0HFkNWvIopOhX/xGs6NH7wLtB8CRxqXekFTM6K0r5fblDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7I5VNHIJTSZNOT3KDWKNFUV5PVYBHGXN",
                            TwoFactorEnabled = false,
                            UserName = "Diyan"
                        },
                        new
                        {
                            Id = "d5b2211a-4ddc-4451-af5e-36b5cfad9a2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f70ba12-e9c5-4a66-8b50-b29cc8be62e1",
                            Email = "admin2@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN2@ADMIN.COM",
                            NormalizedUserName = "IVAN",
                            PasswordHash = "AQAAAAEAACcQAAAAED4OHpM19t5bYoAvzjxrCfMZUsZUw7ACAuPM95I6YMLsKxp8CiRHaLnzPNcmzmwuUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74CLJEIXNYLPRXMVXXNSWXZH6R6KJRRU",
                            TwoFactorEnabled = false,
                            UserName = "Ivan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "c23c3678-6194-4b7e-a928-09614190eb62",
                            RoleId = "ca678235-7571-4177-984f-e9d1957b0187"
                        },
                        new
                        {
                            UserId = "d5b2211a-4ddc-4451-af5e-36b5cfad9a2c",
                            RoleId = "ca678235-7571-4177-984f-e9d1957b0187"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.ToTable("UserRole");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            Id = "ca678235-7571-4177-984f-e9d1957b0187",
                            ConcurrencyStamp = "8e30809c-ebdc-46f2-90b1-7cc374a14110",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.Advertisement", b =>
                {
                    b.HasOne("AutomotiveMarketSystem.Data.Models.Car", "Car")
                        .WithOne("Advertisement")
                        .HasForeignKey("AutomotiveMarketSystem.Data.Models.Advertisement", "CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutomotiveMarketSystem.Data.Models.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.Car", b =>
                {
                    b.HasOne("AutomotiveMarketSystem.Data.Models.CarBrand", "CarBrand")
                        .WithMany("Cars")
                        .HasForeignKey("CarBrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutomotiveMarketSystem.Data.Models.EngineTypeStatus", "EngineType")
                        .WithOne("Car")
                        .HasForeignKey("AutomotiveMarketSystem.Data.Models.Car", "EngineTypeStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AutomotiveMarketSystem.Data.Models.CarModel", b =>
                {
                    b.HasOne("AutomotiveMarketSystem.Data.Models.CarBrand", "CarBrand")
                        .WithMany("BrandModels")
                        .HasForeignKey("CarBrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutomotiveMarketSystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutomotiveMarketSystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AutomotiveMarketSystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutomotiveMarketSystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
